a <- (1.5, 2.9, 0.9, 3.9, 3.2,  2.1, 1.9)
a <- [1.5, 2.9, 0.9, 3.9, 3.2,  2.1, 1.9]
a <- c(1.5, 2.9, 0.9, 3.9, 3.2,  2.1, 1.9)
mis <- mean(a)
stds <- std(a)
(a - mis)^2
sum((a - mis)^2)
sum((a - mis)^2)/length(a)
stds <- sqrt(sum((a - mis)^2)/length(a))
stds
stds <- sum((a - mis)^2)/length(a)
stds
sqrt(4)
sqrt(2)
sqrt(0.96)
stds <- sqrt(stds)
stds
std <- stds * sqrt(length(a))
std
std * 1.65
ci = std * 1.65
c(-ci+mis, ci+mis)
a
length(a)
mu <- mean(a)
mu
var_sample <- 1/length(a)*sum((a - mean(a))^2)
var_sample
std_sample <- sqrt(var_sample)
std_sample
(a - mean(a))
(a - mean(a))^2
sum((a - mean(a))^2)
sum((a - mean(a))^2)/7
sum((a - mean(a))^2)/6
mean(a)
sum((a - mean(a))^2)/3
sum((a - mean(a))^2)/4
sum((a - mean(a))^2)/5
sum((a - mean(a))^2)/6
sum((a - mean(a))^2)/7
sum((a - mean(a))^2)/6.5
sum((a - mean(a))^2)/7
sd(a)
sqrt(sum((a - mean(a))^2)/7)
sqrt(sum((a - mean(a))^2))/7
sqrt(sum((a - mean(a))^2/7))
sqrt(sum(a - mean(a))^2/7)
sqrt(sum(a - mean(a))^2*1/7)
sqrt((sum(a - mean(a))^2)*1/7)
sqrt(sum(a - mean(a))*1/7)
sqrt(sum(a - mean(a)))
sqrt(sum(a-mean(a))^2)
sqrt(sum(a-mean(a))^2)/7
sum((a-mu)^2)/7
sum((a-mu)^2)/7
sd(a)
mu
cls
clean
a <- c(102.5, 11.7, 103.1, 100.9, 100.5, 102.2)
mu <- mean(a)
std <- sd(a)
stdd <- std/sqrt(length(a))
stdd
a
c (-1, 1) * stdd*1.65
cic = c (-1, 1) * stdd*1.65
cic + mu
cic = mu+ c(-1, 1) * stdd*1.96
cic
?rnorm
qnorm(0.975, mu, stdd)
qnorm(0.025, mu, stdd)
1.95/2
std
a
std = sd(a)
std
a <- c(102.5, 101.7, 103.1, 100.9, 100.5, 102.2)
a
std <- sd(a)
stdd <- sd(a)/sqrt(len(a))
stdd <- sd(a)/sqrt(length(a))
stdd
ci <- function(mu, stdd, p) {}
ci <- function(mu, stdd, p) {
}
ci <- function(mu, stdd, z) {
c(-1,1)*stdd*z+mu}
z <- ci(mu, stdd, 1.96)
ci(mu, stdd, 1.96)
a
mu <- mean(a)
ci(mu, stdd, 1.96)
std <- sd(a)
stdd <- sd(a)/sqrt(length(a))
stdd <- sd(a)/sqrt(length(a)-1)
stdd <- sd(a)/sqrt(length(a)-2)
ci(mu, stdd, 1.96)
ci(mu, stdd, 1.65)
z <- (2.2-2)/0.7
0.2857/2
rnorm(0.14285, 2, 0.7)
rnorm(0.14285, 2.0, 0.7)
rnorm(0.28, 2.0, 0.7)
rnorm(0.68, 2.0, 0.7)
rnorm(0, 2.0, 0.7)
rnorm(0, mean=2.0, sd=0.7)
rnorm(1, mean=2.0, sd=0.7)
rnorm(2, mean=2.0, sd=0.7)
pnorm(0.14285, mean=2.0, sd=0.7)
a = (15.6, 16.2, 22.5, 20.5, 16.4, 19.4, 16.6, 17.9, 12.7, 13.9)
a = c(15.6, 16.2, 22.5, 20.5, 16.4, 19.4, 16.6, 17.9, 12.7, 13.9)
m <- mean(a)
s <- sd(a)
ss <- sd(a)/sqrt(length(a))
ss <- sd(a)/sqrt(length(a)-1)
ss <- sd(a)/sqrt(length(a))
t=(20-m)/ss
t
0.2356/sqrt(150)
0.08/0.02
sqrt(0.2356/150)
s <- sqrt(0.38*0.62)
s <- s/sqrt(150)
s
-0.08/s
setwd("~/ownCloud/s3_practical_learning/Codes/My-Data-Science-Toolbox/Kaggle/titanic_machine_learning_from_disaster")
load("rf_cforest.R")
train<-read.csv("data/train.csv",na.strings=c('NA',''),stringsAsFactors=F)
test<-read.csv("data/test.csv",na.strings=c('NA',''),stringsAsFactors=F)
library(randomForest)
library(party)
library(rpart)
check.missing<-function(x) return(paste0(round(sum(is.na(x))/length(x),4)*100,'%'))
data.frame(sapply(train,check.missing))
data.frame(sapply(test,check.missing))
train$Cat<-'train'
test$Cat<-'test'
test$Survived<-NA
full<-rbind(train,test)
table(full$Embarked)
full$Embarked[is.na(full$Embarked)]<-'S'
full$Title<-sapply(full$Name,function(x) strsplit(x,'[.,]')[[1]][2])
full$Title<-gsub(' ','',full$Title)
aggregate(Age~Title,full,median)
full$Title[full$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
full$Title[full$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
full$FamilySize<-full$Parch+full$SibSp+1
fit.Fare<-rpart(Fare[!is.na(Fare)]~Pclass+Title+Sex+SibSp+Parch,data=full[!is.na(full$Fare),],method='anova')
full$Fare[is.na(full$Fare)]<-predict(fit.Fare,full[is.na(full$Fare),])
Surname<-sapply(full$Name,function(x) strsplit(x,'[.,]')[[1]][1])
FamilyId<-paste0(full$FamilySize,Surname)
full$FamilyId<-factor(FamilyId)
Family<-data.frame(table(FamilyId))
SmallFamily<-Family$FamilyId[Family$Freq<=2]
FamilyId[FamilyId %in% SmallFamily]<-'Small'
full$FamilyId2<-factor(FamilyId)
fit.Age<-rpart(Age[!is.na(Age)]~Pclass+Title+Sex+SibSp+Parch+Fare,data=full[!is.na(full$Age),],method='anova')
full$Age[is.na(full$Age)]<-predict(fit.Age,full[is.na(full$Age),])
full$Mother<-0
full$Mother[full$Sex=='female' & full$Parch>0 & full$Age>18 & full$Title!='Miss']<-1
#Adding Child
full$Child<-0
full$Child[full$Parch>0 & full$Age<=18]<-1
data.frame(sapply(full,check.missing))
#Exact Deck from Cabin number
full$Deck<-sapply(full$Cabin, function(x) strsplit(x,NULL)[[1]][1])
deck.fit<-rpart(Deck~Pclass+Fare,data=full[!is.na(full$Deck),])
full$Deck[is.na(full$Deck)]<-as.character(predict(deck.fit,full[is.na(full$Deck),],type='class'))
full$Deck[is.na(full$Deck)]<-'UNK'
#Excat Position from Cabin number
full$CabinNum<-sapply(full$Cabin,function(x) strsplit(x,'[A-Z]')[[1]][2])
full$num<-as.numeric(full$CabinNum)
num<-full$num[!is.na(full$num)]
Pos<-kmeans(num,3)
full$CabinPos[!is.na(full$num)]<-Pos$cluster
full$CabinPos<-factor(full$CabinPos)
levels(full$CabinPos)<-c('Front','End','Middle')
full$num<-NULL
full<-transform(full,
Pclass=factor(Pclass),
Sex=factor(Sex),
Embarked=factor(Embarked),
Title=factor(Title),
Mother=factor(Mother),
Child=factor(Child),
FamilyId2=factor(FamilyId2),
Deck=factor(Deck)
)
#split train/test data
train<-full[full$Cat=='train',]
test<-full[full$Cat=='test',]
train$Survived<-factor(train$Survived)
fit.cf<-cforest(Survived~FamilyId2+CabinPos+Deck+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Mother+Child+Deck,data=train,controls=cforest_unbiased(ntree=500, mtry=3))
#write submission
test$Survived<-predict(fit.cf,test,OOB=TRUE,type='response')
submission<-test[,1:2]
write.csv(submission,'submission_cforest.csv',row.names=F)
write.csv(train, "./data/train_featured_r.csv", row.names=F)
write.csv(test, "./data/test_featured_r.csv", row.names=F)
rain
train
train<-read.csv("./data/train.csv",na.strings=c('NA',''),stringsAsFactors=F)
test<-read.csv("./data/test.csv",na.strings=c('NA',''),stringsAsFactors=F)
#loading libraries
library(randomForest)
library(party)
library(rpart)
# library(rattle)
#checking the missing data
check.missing<-function(x) return(paste0(round(sum(is.na(x))/length(x),4)*100,'%'))
data.frame(sapply(train,check.missing))
data.frame(sapply(test,check.missing))
#combine train/test data for pre-processing
train$Cat<-'train'
test$Cat<-'test'
test$Survived<-NA
full<-rbind(train,test)
#Embarked
table(full$Embarked)
#  C   Q   S
#270 123 914
# subset(full, is.na(Embarked)) -> Google -> "S"...
full$Embarked[is.na(full$Embarked)]<-'S'
#Extract Title from Name
full$Title<-sapply(full$Name,function(x) strsplit(x,'[.,]')[[1]][2])
full$Title<-gsub(' ','',full$Title)
aggregate(Age~Title,full,median)
full$Title[full$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
full$Title[full$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
#check the result
aggregate(Age~Title,full,summary, digits=2)
#         Title Age.Min. Age.1st Qu. Age.Median Age.Mean Age.3rd Qu. Age.Max.
#1          Col    47          52         54       54          57       60
#2           Dr    23          38         49       44          52       54
#3         Lady    38          38         39       42          44       48
#4       Master    0.33        2          4        5.50        9       14
#5         Miss    0.17        15         22       22          30       63
#6         Mlle    24          24         24       24          24       24
#7          Mme    24          24         24       24          24       24
#8           Mr    11          23         29       32          39       80
#9          Mrs    14          27         36       37          46       76
#10          Ms    28          28         28       28          28       28
#11         Rev    27          30         42       41          52       57
#12         Sir    40          45         49       51          52       70
#13 theCountess    33          33         33       33          33       33
#Adding FamilySize
full$FamilySize<-full$Parch+full$SibSp+1
#Fare
# create a decision tree for Fare based on Pclass+Title+Sex+SibSp+Parch (1 Passenger)
fit.Fare<-rpart(Fare[!is.na(Fare)]~Pclass+Title+Sex+SibSp+Parch,data=full[!is.na(full$Fare),],method='anova')
# display the results
printcp(fit.Fare)
# fancyRpartPlot(fit.Fare, main="Fare decision tree - overkill, predicting the 1 single missing Fare")
#predict(fit.Fare,full[is.na(full$Fare),])
#    1044
#12.08246
#> summary(full$Fare)
#
#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
#  0.000   7.896  14.450  33.300  31.280 512.300       1
full$Fare[is.na(full$Fare)]<-predict(fit.Fare,full[is.na(full$Fare),])
#FamilyId2
Surname<-sapply(full$Name,function(x) strsplit(x,'[.,]')[[1]][1])
FamilyId<-paste0(full$FamilySize,Surname)
full$FamilyId<-factor(FamilyId)
Family<-data.frame(table(FamilyId))
SmallFamily<-Family$FamilyId[Family$Freq<=2]
FamilyId[FamilyId %in% SmallFamily]<-'Small'
full$FamilyId2<-factor(FamilyId)
#Age decision tree (regression) method to predict the 20.09% missing Age data
fit.Age<-rpart(Age[!is.na(Age)]~Pclass+Title+Sex+SibSp+Parch+Fare,data=full[!is.na(full$Age),],method='anova')
# fancyRpartPlot(fit.Age, main="Age decision tree - predict the 20.09% missing Age data")
full$Age[is.na(full$Age)]<-predict(fit.Age,full[is.na(full$Age),])
#Adding Mother
full$Mother<-0
full$Mother[full$Sex=='female' & full$Parch>0 & full$Age>18 & full$Title!='Miss']<-1
#Adding Child
full$Child<-0
full$Child[full$Parch>0 & full$Age<=18]<-1
#check missing
data.frame(sapply(full,check.missing))
#Exact Deck from Cabin number
full$Deck<-sapply(full$Cabin, function(x) strsplit(x,NULL)[[1]][1])
deck.fit<-rpart(Deck~Pclass+Fare,data=full[!is.na(full$Deck),])
full$Deck[is.na(full$Deck)]<-as.character(predict(deck.fit,full[is.na(full$Deck),],type='class'))
full$Deck[is.na(full$Deck)]<-'UNK'
#Excat Position from Cabin number
full$CabinNum<-sapply(full$Cabin,function(x) strsplit(x,'[A-Z]')[[1]][2])
full$num<-as.numeric(full$CabinNum)
num<-full$num[!is.na(full$num)]
Pos<-kmeans(num,3)
full$CabinPos[!is.na(full$num)]<-Pos$cluster
full$CabinPos<-factor(full$CabinPos)
levels(full$CabinPos)<-c('Front','End','Middle')
full$num<-NULL
#side.train<-full[!is.na(full$Side),]
#side.test<-full[is.na(full$Side),]
#side.fit<-rpart(Side~FamilyId+FamilySize,side.train,method='class')
#full$Side[is.na(full$Side)]<-as.character(predict(side.fit,side.test,type='class'))
#factorize the categorical variables
full<-transform(full,
Pclass=factor(Pclass),
Sex=factor(Sex),
Embarked=factor(Embarked),
Title=factor(Title),
Mother=factor(Mother),
Child=factor(Child),
FamilyId2=factor(FamilyId2),
Deck=factor(Deck)
)
#split train/test data
train<-full[full$Cat=='train',]
test<-full[full$Cat=='test',]
train$Survived<-factor(train$Survived)
#cforest (conditional inference tree) method, (support variables with more levels and missing values, with unbiased prediction)
fit.cf<-cforest(Survived~FamilyId2+CabinPos+Deck+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Mother+Child+Deck,data=train,controls=cforest_unbiased(ntree=500, mtry=3))
#write submission
test$Survived<-predict(fit.cf,test,OOB=TRUE,type='response')
submission<-test[,1:2]
View(train)
View(train)
View(full)
fit.cf<-cforest(Survived~FamilyId2+CabinPos+Deck+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Mother+Child+Deck,data=train,controls=cforest_unbiased(ntree=2000, mtry=3))
test$Survived<-predict(fit.cf,test,OOB=TRUE,type='response')
submission<-test[,1:2]
write.csv(submission,'data/submission_cforest_2000trees.csv',row.names=F)
View(test)
library(xgboost)
library(xgboost)
View(train)
train_x = train[, c("FamilyId2", "CabinPos", "Deck", "Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked", "Title", "Mother", "Child", "Deck")]
train_y = train[, c("Survived")]
eta = .1, nthread = 4, nround = 10, objective = "binary:logistic")
eta = 0.1, nthread = 4, nround = 10, objective = "binary:logistic")
eta = 1, nthread = 4, nround = 10, objective = "binary:logistic")
xgboost(data = train_x, label = train_y, max.depth = 8, eta = 1, nthread = 4, nround = 10, objective = "binary:logistic")
nthread = 4, nround = 10, objective = "binary:logistic")
xgboost(data = train_x, label = train_y, max.depth = 8, eta = .1,
nthread = 4, nround = 10, objective = "binary:logistic")
xgboost(data = as.matrix(train_x), label = train_y, max.depth = 8, eta = .1,
nthread = 4, nround = 10, objective = "binary:logistic")
train_r<-read.csv("./data/train_featured_r_processed.csv",na.strings=c('NA',''),stringsAsFactors=F, sep='\t')
test_r<-read.csv("./data/test_featured_r_processed.csv",na.strings=c('NA',''),stringsAsFactors=F, sep='\t')
train_x = train_r[, c("FamilyId2", "CabinPos", "Deck", "Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked", "Title", "Mother", "Child", "Deck")]
train_y = train_r[, c("Survived")]
xgboost(data = as.matrix(train_x), label = train_y, max.depth = 8, eta = .1,
nthread = 4, nround = 10, objective = "binary:logistic")
View(train_x)
train_x = train_r[, c("FamilyId2", "Deck", "Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked", "Title", "Mother", "Child", "Deck")]
train_y = train_r[, c("Survived")]
xgboost(data = as.matrix(train_x), label = train_y, max.depth = 8, eta = .1,
nthread = 4, nround = 10, objective = "binary:logistic")
model = xgboost(data = as.matrix(train_x), label = train_y, max.depth = 8, eta = .1,
nthread = 4, nround = 50, objective = "binary:logistic")
predict(model, as.matrix(test_r))
predict(model, test_r)
test_r<-read.csv("./data/test_featured_r_processed.csv",na.strings=c('NA',''),stringsAsFactors=F, sep='\t')
predict(model, as.matrix(test_r))
View(test_r)
features =  c("FamilyId2", "Deck", "Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked", "Title", "Mother", "Child", "Deck")
predict(model, as.matrix(test_r[, features]))
ypred = predict(model, as.matrix(test_r[, features]))
ypred = apply(ypred, function(x) if(x > .5) 1 else 0)
ypred = lapply(ypred, function(x){ if(x > .5) 1 else 0 })
submission <- c(test[,1], ypred)
submission <- cbind(test[,1], ypred)
View(submission)
write.csv(submission,'data/submission_xboost_md8_eta1_nr50.csv',row.names=F)
write.csv(submission,'data/submission_xboost_md8_eta1_nr50.csv',row.names=F, col.names=c("PassengerId", "Survived"))
View(submission)
colnames(submission) <- c("PassengerId", "Survived")
View(submission)
write.csv(submission,'data/submission_xboost_md8_eta1_nr50.csv',row.names=F)
